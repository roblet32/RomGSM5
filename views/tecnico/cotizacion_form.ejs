<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= isEdit ? 'Editar Cotizaci√≥n' : 'Crear Cotizaci√≥n' %> | ROCKETGSM</title>
  <link rel="stylesheet" href="/css/base.css">
  <link rel="stylesheet" href="/css/dashboard.css">
  <style>
    .form-container {
      max-width: 1000px;
      margin: 0 auto;
    }
    
    .order-info-card {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 24px;
      border-radius: var(--border-radius);
      margin-bottom: 24px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.1);
    }
    
    .order-info-card h2 {
      margin: 0 0 16px 0;
      font-size: 24px;
      font-weight: 600;
    }
    
    .order-details {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 16px;
    }
    
    .order-detail {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
    
    .order-label {
      font-size: 12px;
      opacity: 0.8;
      font-weight: 500;
    }
    
    .order-value {
      font-size: 16px;
      font-weight: 600;
    }
    
    .form-section {
      background: #fff;
      border-radius: var(--border-radius);
      box-shadow: 0 4px 24px rgba(0,0,0,0.07);
      padding: 24px;
      margin-bottom: 24px;
      border: 1px solid #e2e8f0;
    }
    
    .section-title {
      color: var(--primary-dark);
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 20px;
      padding-bottom: 8px;
      border-bottom: 2px solid var(--primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    
    .form-group label {
      font-weight: 600;
      color: var(--primary-dark);
      font-size: 14px;
    }
    
    .form-group input,
    .form-group select,
    .form-group textarea {
      padding: 12px;
      border: 2px solid #e2e8f0;
      border-radius: var(--border-radius);
      font-family: inherit;
      font-size: 14px;
      transition: all var(--transition);
      background: #fff;
    }
    
    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    .form-group textarea {
      resize: vertical;
      min-height: 100px;
    }
    
    .items-container {
      margin-bottom: 16px;
    }
    
    .item-row {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr 1fr auto;
      gap: 12px;
      align-items: center;
      padding: 16px;
      background: var(--background);
      border-radius: var(--border-radius);
      margin-bottom: 12px;
      border: 1px solid #e2e8f0;
      transition: all var(--transition);
    }
    
    .item-row:hover {
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      border-color: var(--primary);
    }
    
    .item-row input[readonly] {
      background: #f8f9fa;
      color: var(--text);
      font-weight: 600;
    }
    
    .remove-btn {
      background: linear-gradient(135deg, var(--danger), #c0392b);
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: all var(--transition);
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .remove-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }
    
    .add-item-btn {
      background: linear-gradient(135deg, var(--success), #2ecc71);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: all var(--transition);
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
    }
    
    .add-item-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
    }
    
    .add-item-btn:disabled {
      background: #6c757d;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    .form-actions {
      display: flex;
      gap: 12px;
      margin-top: 32px;
      padding-top: 24px;
      border-top: 1px solid #e2e8f0;
      flex-wrap: wrap;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: all var(--transition);
      font-weight: 500;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(59, 130, 246, 0.3);
    }
    
    .btn-secondary {
      background: linear-gradient(135deg, #6c757d, #5a6268);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: all var(--transition);
      font-weight: 500;
      font-size: 16px;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-secondary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(108, 117, 125, 0.3);
    }
    
    .btn-info {
      background: linear-gradient(135deg, #17a2b8, #138496);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: all var(--transition);
      font-weight: 500;
      font-size: 16px;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-info:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(23, 162, 184, 0.3);
    }
    
    .empty-state {
      text-align: center;
      padding: 40px;
      color: var(--text);
      background: var(--background);
      border-radius: var(--border-radius);
      border: 2px dashed #e2e8f0;
    }
    
    .empty-state p {
      font-size: 16px;
      margin: 0;
      color: var(--text);
    }
    
    .header-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      flex-wrap: wrap;
      gap: 16px;
    }
    
    @media (max-width: 768px) {
      .item-row {
        grid-template-columns: 1fr;
        gap: 8px;
      }
      
      .form-actions {
        flex-direction: column;
      }
      
      .order-details {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <main>
    <div class="container">
      <div class="header-actions">
        <h1><%= isEdit ? '‚úèÔ∏è Editar Cotizaci√≥n' : 'üí∞ Crear Cotizaci√≥n' %></h1>
        <div class="form-actions">
          <a href="/tecnico/dashboard" class="btn-info">üè† Dashboard</a>
        </div>
      </div>

      <!-- Informaci√≥n de la Orden -->
      <div class="order-info-card">
        <h2>üìã Orden #<%= orden && orden._id ? orden._id.toString().slice(-6) : '' %></h2>
        <div class="order-details">
          <div class="order-detail">
            <span class="order-label">üë§ Cliente</span>
            <span class="order-value"><%= orden && orden.dispositivo && orden.dispositivo.cliente ? orden.dispositivo.cliente.nombre : 'N/A' %></span>
          </div>
          <div class="order-detail">
            <span class="order-label">üíª Dispositivo</span>
            <span class="order-value"><%= orden && orden.dispositivo && orden.dispositivo.descripcionCompleta ? orden.dispositivo.descripcionCompleta : 'N/A' %></span>
          </div>
          <div class="order-detail">
            <span class="order-label">üîß Problema</span>
            <span class="order-value"><%= orden && orden.dispositivo && orden.dispositivo.descripcionProblema ? orden.dispositivo.descripcionProblema : 'N/A' %></span>
          </div>
        </div>
      </div>

      <form action="<%= isEdit && cotizacion ? ('/tecnico/cotizaciones/' + cotizacion._id + '/editar') : ('/tecnico/ordenes/' + orden._id + '/cotizar') %>" method="POST" class="form-container">
        
        <!-- Mano de Obra -->
        <div class="form-section">
          <h3 class="section-title">üõ†Ô∏è Mano de Obra</h3>
          <div class="form-group" style="grid-column: 1 / -1;">
            <label for="descripcionManoObra">Descripci√≥n del trabajo:</label>
            <textarea name="descripcionManoObra" id="descripcionManoObra" required placeholder="Describa detalladamente el trabajo a realizar..."><%= isEdit && cotizacion ? cotizacion.manoDeObra.descripcion : '' %></textarea>
          </div>
          <div class="form-grid">
            <div class="form-group">
              <label for="horas">‚è±Ô∏è Horas estimadas:</label>
              <input type="number" name="horas" id="horas" min="0" step="0.5" required placeholder="0.0" value="<%= isEdit && cotizacion ? cotizacion.manoDeObra.horas : '' %>">
            </div>
            <div class="form-group">
              <label for="precioPorHora">üí∞ Precio por hora ($):</label>
              <input type="number" name="precioPorHora" id="precioPorHora" min="0" step="0.01" required placeholder="0.00" value="<%= isEdit && cotizacion ? cotizacion.manoDeObra.precioPorHora : '' %>">
            </div>
          </div>
        </div>

        <!-- Materiales / Inventario -->
        <div class="form-section">
          <h3 class="section-title">üì¶ Materiales / Inventario</h3>
          <div id="items-container" class="items-container">
            <!-- Los items se agregar√°n din√°micamente aqu√≠ -->
          </div>
          <button type="button" id="addItemBtn" class="add-item-btn">
            ‚ûï Agregar Material
          </button>
        </div>

        <!-- Observaciones -->
        <div class="form-section">
          <h3 class="section-title">üìù Observaciones</h3>
          <div class="form-group">
            <textarea name="observaciones" rows="4" placeholder="Observaciones adicionales, notas especiales, condiciones, etc..."><%= isEdit && cotizacion ? cotizacion.observaciones : '' %></textarea>
          </div>
        </div>

        <!-- Acciones del Formulario -->
        <div class="form-actions">
          <button type="submit" class="btn-primary">
            <%= isEdit ? 'üíæ Actualizar Cotizaci√≥n' : 'üíæ Guardar Cotizaci√≥n' %>
          </button>
          <button type="button" onclick="history.back()" class="btn-secondary">
            ‚¨ÖÔ∏è Volver
          </button>
        </div>
      </form>
    </div>

    <script id="inventory-data" type="application/json">
      <%- JSON.stringify(inventario || []) %>
    </script>
    
    <script>
      const inventoryDataElement = document.getElementById('inventory-data');
      const inventario = JSON.parse(inventoryDataElement.textContent);
      const addItemBtn = document.getElementById('addItemBtn');
      
      // Deshabilitar bot√≥n si no hay inventario
      if (inventario.length === 0) {
        addItemBtn.disabled = true;
        addItemBtn.innerHTML = '‚ùå No hay materiales disponibles';
        document.getElementById('items-container').innerHTML = `
          <div class="empty-state">
            <p>No hay materiales disponibles en el inventario</p>
          </div>
        `;
      }
      
      function agregarItem() {
        const container = document.getElementById('items-container');
        const itemIndex = container.children.length;
        
        if (inventario.length === 0) {
          alert('No hay materiales disponibles en el inventario');
          return;
        }
        
        let options = '<option value="">Seleccionar material...</option>';
        inventario.forEach(function(item) {
          const option = '<option value="' + item._id + '" data-precio="' + item.precio + '">' + item.nombre + ' - $' + item.precio.toFixed(2) + '</option>';
          options += option;
        });
        
        const itemHTML = `
          <div class="item-row" id="item-${itemIndex}">
            <select name="itemsInventario[${itemIndex}][inventarioItem]" required onchange="actualizarPrecio(${itemIndex})">
              ${options}
            </select>
            <input type="number" name="itemsInventario[${itemIndex}][cantidad]" placeholder="Cantidad" min="1" required onchange="calcularSubtotal(${itemIndex})">
            <input type="number" name="itemsInventario[${itemIndex}][precioUnitario]" placeholder="Precio unitario" step="0.01" min="0" required onchange="calcularSubtotal(${itemIndex})">
            <input type="number" name="itemsInventario[${itemIndex}][subtotal]" placeholder="Subtotal" readonly>
            <button type="button" class="remove-btn" onclick="removerItem(${itemIndex})">
              üóëÔ∏è Eliminar
            </button>
          </div>
        `;
        
        container.insertAdjacentHTML('beforeend', itemHTML);
      }
      
      function actualizarPrecio(itemIndex) {
        const itemRow = document.getElementById('item-' + itemIndex);
        const select = itemRow.querySelector('select');
        const precioInput = itemRow.querySelector('input[name*="[precioUnitario]"]');
        const selectedOption = select.options[select.selectedIndex];
        
        if (selectedOption.value) {
          const precio = selectedOption.getAttribute('data-precio');
          precioInput.value = precio;
          calcularSubtotal(itemIndex);
        }
      }
      
      function calcularSubtotal(itemIndex) {
        const itemRow = document.getElementById('item-' + itemIndex);
        const cantidadInput = itemRow.querySelector('input[name*="[cantidad]"]');
        const precioInput = itemRow.querySelector('input[name*="[precioUnitario]"]');
        const subtotalInput = itemRow.querySelector('input[name*="[subtotal]"]');
        
        const cantidad = parseFloat(cantidadInput.value) || 0;
        const precio = parseFloat(precioInput.value) || 0;
        const subtotal = cantidad * precio;
        
        subtotalInput.value = subtotal.toFixed(2);
      }
      
      function removerItem(itemIndex) {
        const itemRow = document.getElementById('item-' + itemIndex);
        itemRow.remove();
        
        // Reindexar los elementos restantes
        const container = document.getElementById('items-container');
        const items = container.querySelectorAll('.item-row');
        
        items.forEach(function(item, index) {
          item.id = 'item-' + index;
          
          const select = item.querySelector('select');
          const cantidadInput = item.querySelector('input[name*="[cantidad]"]');
          const precioInput = item.querySelector('input[name*="[precioUnitario]"]');
          const subtotalInput = item.querySelector('input[name*="[subtotal]"]');
          const removeBtn = item.querySelector('.remove-btn');
          
          select.name = 'itemsInventario[' + index + '][inventarioItem]';
          cantidadInput.name = 'itemsInventario[' + index + '][cantidad]';
          precioInput.name = 'itemsInventario[' + index + '][precioUnitario]';
          subtotalInput.name = 'itemsInventario[' + index + '][subtotal]';
          
          select.onchange = function() { actualizarPrecio(index); };
          cantidadInput.onchange = function() { calcularSubtotal(index); };
          precioInput.onchange = function() { calcularSubtotal(index); };
          removeBtn.onclick = function() { removerItem(index); };
        });
      }
      
      // Event listener para el bot√≥n de agregar item
      addItemBtn.addEventListener('click', agregarItem);
      
      // Cargar datos existentes si es edici√≥n
      window.addEventListener('load', function() {
        if (typeof isEdit !== 'undefined' && isEdit && cotizacion && cotizacion.itemsInventario && cotizacion.itemsInventario.length > 0) {
          cotizacion.itemsInventario.forEach(function(item, idx) {
            agregarItem();
            const itemRow = document.getElementById('item-' + idx);
            if (itemRow) {
              const select = itemRow.querySelector('select');
              const cantidadInput = itemRow.querySelector('input[name*="[cantidad]"]');
              const precioInput = itemRow.querySelector('input[name*="[precioUnitario]"]');
              const subtotalInput = itemRow.querySelector('input[name*="[subtotal]"]');
              
              select.value = item.inventarioItem ? item.inventarioItem._id : '';
              cantidadInput.value = item.cantidad;
              precioInput.value = item.precioUnitario;
              subtotalInput.value = item.subtotal;
            }
          });
        } else if (inventario.length > 0) {
          agregarItem();
        }
      });
    </script>
  </main>
</body>
</html> 